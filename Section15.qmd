---
title: "Section15"
author: "Jax Lubkowitz"
format: html
editor: visual
---
```{r}
library(tidyverse)

theme_set(theme_minimal())

atp_df <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2023.csv")
wta_df <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2023.csv")

both_df <- bind_rows(atp_df, wta_df)

both_long <- both_df |> pivot_longer(c(winner_name, loser_name))

## only keep players who have player over 50 matches
both_n50 <- both_long |> group_by(value) |> summarise(n = n()) |>
  filter(n > 50)

## construct various statistics
major_tennis <- semi_join(both_long, both_n50, by = c("value"))
major_tennis <- major_tennis |> mutate(w_svperc = 100 * w_1stIn / w_svpt,
                        l_svperc = 100 * l_1stIn / l_svpt,
                        w_firstwon = 100 * w_1stWon / w_1stIn,
                        l_firstwon = 100 * l_1stWon / l_1stIn,
                        w_secondwon = 100 * w_2ndWon / (w_svpt - w_1stIn),
                        l_secondwon = 100 * l_2ndWon / (l_svpt - l_1stIn))

major_tennis_w <- major_tennis |> filter(name == "winner_name")
major_tennis_l <- major_tennis |> filter(name == "loser_name")

w_small <- major_tennis_w |> select(value, winner_seed, w_ace, w_df,
                                    w_svperc, w_firstwon, w_secondwon) |>
  rename(seed = winner_seed, ace = w_ace, df = w_df, svperc = w_svperc,
         firstwon = w_firstwon, secondwon = w_secondwon)

l_small <- major_tennis_l |> select(value, loser_seed, l_ace, l_df,
                                    l_svperc, l_firstwon, l_secondwon) |>
  rename(seed = loser_seed, ace = l_ace, df = l_df, svperc = l_svperc,
         firstwon = l_firstwon, secondwon = l_secondwon)

df <- bind_rows(w_small, l_small) |>
  rename(player = "value")


ggplot(data = df, aes(x = ace)) +
  geom_histogram()
```


```{r}
library(shiny)

players <- df |> 
  mutate(player = factor(player)) |> 
  pull(player) |> 
  levels()

ui <- fluidPage(
  selectInput("player", 
              label = "Select Player of Interest", 
              choices = players),
  selectInput("stat", 
              label = "Select a Statistic of Interest", 
              choices = c("seed", "ace", "df", "svperc","firstwon","secondwon")),    
  mainPanel(
      plotOutput("major_plot"))
)

server <- function(input, output, session) {
  data_set <- reactive({data <- df |> filter(player == input$player)})
  
  output$major_plot <- renderPlot({
    ggplot(data = data_set(), aes(x = ace)) +
      geom_histogram()
  })
}

shinyApp(ui, server)
```


