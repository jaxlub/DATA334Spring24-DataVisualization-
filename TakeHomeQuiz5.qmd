---
title: "TakeHomeQuiz5"
author: "Jax Lubkowitz"
format: 
  html:
    embed-resources: true
---

**Statement of Integrity**: "All work presented is my own, and I have followed all rules for collaboration. If I used any AI on this assignment, I have clearly stated both (1) what my search prompt was and (2) what I used from the AI answer.""

Jax Lubkowitz

```{r}
library(tidyverse)
atp_rankings <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_rankings_20s.csv")
atp_rankings_10s <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_rankings_10s.csv")
atp_players <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_players.csv")

df10s <- left_join(atp_rankings_10s, atp_players,
                   join_by(player == player_id))
df20s <- left_join(atp_rankings, atp_players,
                   join_by(player == player_id))

atp_top50_ever <- bind_rows(df10s, df20s) |>
  filter(rank <= 50)

atp_rank <- bind_rows(df10s, df20s) |>
  semi_join(atp_top50_ever, join_by(player == player)) |>
  unite(name, c("name_first", "name_last"), sep = " ") |>
  mutate(ranking_date = lubridate::ymd(ranking_date)) |>
  complete(name, ranking_date, fill = list(points = 0)) |> 
  arrange(ranking_date, desc(points))
```

# Question 1
```{r}
library(plotly)

atp_one <- atp_rank |> filter(name == "Roger Federer")
atp_time <- atp_one |> filter(lubridate::year(ranking_date) >= 2010)

plot <- ggplot(data = atp_time, aes(x = ranking_date, y = points, rank = rank)) +
  geom_line() +
  theme_minimal() +
  labs(title = "Ranking Points for Roger Federer") +
  lims(y = c(0, NA))

ggplotly(plot, tooltip = c("rank"))
``` 

# Question 2
```{r}
library(shiny)
library(lubridate)

atp_rank <- atp_rank |> mutate(year = year(ranking_date))

name <- atp_rank |> 
  mutate(name = factor(name)) |> 
  pull(name) |> 
  levels()

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectInput("name", 
                  label = "Select Player of Interest", 
                  choices = name),
      sliderInput("years", "Select Years", min = 2010, max = 2023, value = 2010, sep = ""),
      radioButtons("yaxis", "Select Stat", choices = c("points", "rank"))),
    mainPanel(
      plotOutput("plot"),
    )))

server <- function(input, output, session) {
  
  data_set <- reactive({data <- atp_rank |> filter(name == input$name) |> filter(year >= input$years)})
  
  output$plot <- renderPlot({
    ggplot(data = data_set(), aes(x = ranking_date, y = .data[[input$yaxis]])) +
      geom_line() +
      theme_minimal() +
      labs(title = glue::glue("Ranking Points for ", input$name)) + 
      lims(y = c(0, NA))})
}

shinyApp(ui, server)
```



